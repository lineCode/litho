apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
    }

    // TODO(#62): Re-enable abort on error.
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.all {
            // We use PowerMock now, so we need to limit the classloader reuse.
            forkEvery = 1
            maxParallelForks = 2
            jvmArgs '-Dcom.facebook.litho.is_oss=true'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }
}

afterEvaluate {
    tasks.withType(Test) {
        it.dependsOn rootProject.copyYogaLibs
        systemProperty 'java.library.path', "${rootDir}/build/jniLibs"
        environment 'LD_LIBRARY_PATH', "${rootDir}/build/jniLibs"
        environment 'DYLD_LIBRARY_PATH', "${rootDir}/build/jniLibs"
    }
}

dependencies {
    implementation project(':litho-core')
    implementation deps.supportRecyclerView
    compileOnly project(':litho-annotations')
    annotationProcessor project(':litho-processor')

    // Annotations
    compileOnly deps.jsr305
    compileOnly deps.inferAnnotations

    // First-party
    implementation deps.textlayoutbuilder

    // Android Support Library
    implementation deps.supportCoreUi

    // Testing
    testImplementation project(':litho-testing')
    testImplementation deps.robolectric
    testImplementation deps.soloader
    testImplementation deps.powermockMockito
    testImplementation deps.powermockJunit
    testImplementation deps.powermockXstream
}

apply from: rootProject.file('gradle/release.gradle')

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
artifacts.add('archives', sourcesJar)
